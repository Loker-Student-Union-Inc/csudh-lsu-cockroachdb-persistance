// Apply plugins
plugins {
    id 'java'
    id 'jacoco'  // JaCoCo plugin for code coverage
    id 'maven-publish'  // Maven Publish plugin
}

// Java toolchain setup
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Use Java 17 or any compatible version
    }
}

// Set the group for the project
group = 'edu.csudh.lsu.persistence'

// Fetch the latest Git tag dynamically and use it as the version
version = getLatestTagOrSnapshot()

// Repositories configuration
repositories {
    mavenCentral()
}

// Function to get the latest Git tag or fallback to "1.0-SNAPSHOT"
def getLatestTagOrSnapshot() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception ignored) {
        return "1.0-SNAPSHOT"
    }
}

// Source sets configuration
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

// External dependencies versions
ext {
    springBootVersion = '3.3.2'
    lombokVersion = '1.18.34'
}

// Project dependencies
dependencies {
    // Spring Boot and JPA dependencies
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"

    // Lombok dependencies
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Jackson dependencies
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // Jakarta dependencies
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'com.h2database:h2:2.2.220'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:3.4.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.4.0'
    testImplementation 'org.objenesis:objenesis:3.4'

    // Other utilities
    implementation 'net.bytebuddy:byte-buddy:1.14.18'
}

// Task for processing resources with dynamic replacements
tasks.named('processResources') {
    from('src/main/resources') {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                "applicationVersion": version.toString(),
                "applicationBuildTimestamp": getDate()
        ], beginToken: '^', endToken: '^')
    }
}

// Java compile options
tasks.withType(JavaCompile) {
    options.release = 17 // Or another supported version like 11 or 20
}

// Function to get the current date
def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM-dd-yyyy HH:mm:ss')
    return formattedDate
}

// JaCoCo configuration
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/model/**',
                    '**/repository/**',
                    '**/constants/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // 80% coverage
            }
            excludes = [
                    './edu/csudh/lsu/persistence/model/**',
                    './edu/csudh/lsu/persistence/repository/**',
                    './edu/csudh/lsu/persistence/constants/**'
            ]
        }
    }
}

// Ensure coverage verification before check
check.dependsOn jacocoTestCoverageVerification

// Test task configuration
test {
    useJUnitPlatform()
}

// Define tasks for release and snapshot JARs
task releaseJar(type: Jar) {
    archiveBaseName.set("csudh-lsu-cockroachdb-persistance")  // Custom name without version
    archiveVersion.set("")  // No version in the file name for release
    from sourceSets.main.output
    destinationDirectory.set(file("$buildDir/libs"))  // Ensure it is output to the libs directory
}

task snapshotJar(type: Jar) {
    archiveBaseName.set("csudh-lsu-cockroachdb-persistance")
    archiveVersion.set("${project.version}")  // Snapshot version
    from sourceSets.main.output
    destinationDirectory.set(file("$buildDir/libs"))  // Ensure it is output to the libs directory
}

// Only one of releaseJar or snapshotJar should be created based on version
if (version.endsWith("-SNAPSHOT")) {
    assemble.dependsOn snapshotJar
} else {
    assemble.dependsOn releaseJar
}

// Register the correct JAR as an artifact for the publishing tasks
publishing {
    publications {
        // Conditionally publish release or snapshot based on the version
        if (version.endsWith("-SNAPSHOT")) {
            snapshot(MavenPublication) {
                artifact snapshotJar
                groupId = 'edu.csudh.lsu.persistence'
                version = project.version  // Snapshot version
            }
        } else {
            release(MavenPublication) {
                artifact releaseJar
                groupId = 'edu.csudh.lsu.persistence'
                version = project.version.replace('-SNAPSHOT', '')  // Release version without SNAPSHOT
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Loker-Student-Union-Inc/csudh-lsu-cockroachdb-persistance")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME_GITHUB")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
