name: CI/CD Pipeline

# Define the events that trigger the workflow
on:
  push:
    branches:
      - master       # Trigger workflow on pushes to the master branch.
      - develop      # Trigger workflow on pushes to the develop branch.
      - feature/*    # Trigger workflow on pushes to any branch starting with 'feature/'.
      - release/*    # Trigger workflow on pushes to any branch starting with 'release/'.
      - bugfix/*     # Trigger workflow on pushes to any branch starting with 'bugfix/'.
  pull_request:
    branches:
      - master       # Trigger workflow on pull requests targeting the master branch.
      - develop      # Trigger workflow on pull requests targeting the develop branch.
      - feature/*    # Trigger workflow on pull requests targeting any branch starting with 'feature/'.
      - release/*    # Trigger workflow on pull requests targeting any branch starting with 'release/'.
      - bugfix/*     # Trigger workflow on pull requests targeting any branch starting with 'bugfix/'.
  workflow_dispatch:  # Allows the workflow to be manually triggered from the GitHub Actions tab.

# Set permissions for the workflow
permissions:
  contents: write  # Ensure the GitHub Actions bot can write to the repository (including pushing tags)
  packages: write  # Ensure the GitHub Actions bot can write to GitHub Packages

# Define jobs to be executed in the workflow
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu as the environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v2  # Set up Java Development Kit (JDK) version 17
        with:
          distribution: 'temurin'  # Specify the JDK distribution to use
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build  # Run the Gradle build task

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport  # Run tests and generate the JaCoCo coverage report

      - name: Verify test coverage
        run: |
          # Extract the test coverage percentage from the JaCoCo report
          COVERAGE=$(./gradlew jacocoTestReport | grep -o 'TOTAL.*$' | awk '{print $4}')
          echo "Coverage is $COVERAGE"
          # Check if coverage is below the threshold (80%)
          if [ $(echo "$COVERAGE < 80" | bc -l) -ne 0 ]; then
            echo "Test coverage below 80%. Failing build."
            exit 1
          fi

      - name: Store artifact
        uses: actions/upload-artifact@v2  # Store the build artifacts for later use (e.g., in other jobs)
        with:
          name: build-artifacts
          path: build/libs/

  publish:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu as the environment
    needs: build  # This job depends on the successful completion of the 'build' job
    if: github.ref == 'refs/heads/master'  # Only run this job if the current branch is 'master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v2  # Set up Java Development Kit (JDK) version 17
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Publish to GitHub Packages
        run: ./gradlew publish --info --stacktrace  # Enable detailed logs and stacktrace and Publish the built artifacts to GitHub Packages
        env:
          USERNAME_GITHUB: ${{ secrets.USERNAME_GITHUB }}  # GitHub username stored in repository secrets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token automatically provided by GitHub Actions

  tag:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu as the environment
    needs: build  # This job depends on the successful completion of the 'build' job
    if: github.ref == 'refs/heads/master'  # Only run this job if the current branch is 'master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v2  # Set up Java Development Kit (JDK) version 17
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Bump version and create tag
        id: bump_version
        run: |
          # Fetch tags from the repository
          git fetch --tags
          
          # Get the latest tag from the repository
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract the major, minor, and patch components
          VERSION_MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          VERSION_MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          VERSION_PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          # Increment the patch version (you can modify this logic to increment major/minor as needed)
          VERSION_PATCH=$((VERSION_PATCH + 1))
          
          # Create the new version tag
          NEW_TAG="v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
          echo "New tag version: $NEW_TAG"
          
          # Tag the commit with the new version
          git tag $NEW_TAG
          git push origin $NEW_TAG  # Push the new tag to the remote repository

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the automatically provided GitHub token

      - name: Notify success
        run: echo "Build and tag ${{ steps.bump_version.outputs.NEW_TAG }} successful."  # Notify that the tagging was successful
