name: CI/CD Pipeline

on:
  push:
    branches:
      - master       # Triggers workflow on pushes to the master branch.
      - develop      # Triggers workflow on pushes to the develop branch.
      - feature/*    # Triggers workflow on pushes to any branch starting with 'feature/'.
      - release/*    # Triggers workflow on pushes to any branch starting with 'release/'.
      - bugfix/*     # Triggers workflow on pushes to any branch starting with 'bugfix/'.
  pull_request:
    branches:
      - master       # Triggers workflow on pull requests targeting the master branch.
      - develop      # Triggers workflow on pull requests targeting the develop branch.
      - feature/*    # Triggers workflow on pull requests targeting any branch starting with 'feature/'.
      - release/*    # Triggers workflow on pull requests targeting any branch starting with 'release/'.
      - bugfix/*     # Triggers workflow on pull requests targeting any branch starting with 'bugfix/'.
  workflow_dispatch:  # Allows the workflow to be manually triggered from the GitHub Actions tab.

permissions:
  contents: write  # Ensure the GitHub Actions bot can write to the repository (including pushing tags)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport

      - name: Verify test coverage
        run: |
          COVERAGE=$(./gradlew jacocoTestReport | grep -o 'TOTAL.*$' | awk '{print $4}')
          echo "Coverage is $COVERAGE"
          if [ $(echo "$COVERAGE < 93" | bc -l) -ne 0 ]; then
            echo "Test coverage below 93%. Failing build."
            exit 1
          fi

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/libs/

  tag:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Bump version and create tag
        id: bump_version
        run: |
          # Try to get the latest tag
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Split the latest version into its components
          VERSION_MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          VERSION_MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          VERSION_PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          # Increment the patch version (or change logic to increment minor/major as needed)
          VERSION_PATCH=$((VERSION_PATCH + 1))

          # Create the new version tag
          NEW_TAG="v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
          echo "New tag version: $NEW_TAG"

          # Tag the commit
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.LSU_ACTIONS_PAT }}

      - name: Notify success
        run: echo "Build and tag ${{ steps.bump_version.outputs.NEW_TAG }} successful."
