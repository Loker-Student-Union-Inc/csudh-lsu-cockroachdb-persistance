name: CI/CD Pipeline  # The name of the GitHub Actions workflow.

on:
  push:
    branches:
      - master       # Triggers workflow on pushes to the master branch.
      - develop      # Triggers workflow on pushes to the develop branch.
      - feature/*    # Triggers workflow on pushes to any branch starting with 'feature/'.
      - release/*    # Triggers workflow on pushes to any branch starting with 'release/'.
      - bugfix/*     # Triggers workflow on pushes to any branch starting with 'bugfix/'.
  pull_request:
    branches:
      - master       # Triggers workflow on pull requests targeting the master branch.
      - develop      # Triggers workflow on pull requests targeting the develop branch.
      - feature/*    # Triggers workflow on pull requests targeting any branch starting with 'feature/'.
      - release/*    # Triggers workflow on pull requests targeting any branch starting with 'release/'.
      - bugfix/*     # Triggers workflow on pull requests targeting any branch starting with 'bugfix/'.
  workflow_dispatch:  # Allows the workflow to be manually triggered from the GitHub Actions tab.

jobs:
  build:
    runs-on: ubuntu-latest  # The environment in which the workflow runs, using the latest Ubuntu version.

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Checks out the code from the repository so it can be built.

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build  # Builds the project using Gradle.

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport  # Runs the tests and generates a coverage report using Jacoco.

      - name: Verify test coverage
        run: |
          # Extract the test coverage percentage from the Jacoco report.
          COVERAGE=$(./gradlew jacocoTestReport | grep -o 'TOTAL.*$' | awk '{print $4}')
          echo "Coverage is $COVERAGE"
          # Check if the coverage is less than 93%. If yes, fail the build.
          if [ $(echo "$COVERAGE < 93" | bc -l) -ne 0 ]; then
            echo "Test coverage below 93%. Failing build."
            exit 1
          fi

      - name: Generate version tag
        id: tag_version
        run: |
          # Generate a new version tag based on the current timestamp.
          VERSION="v$(date +'%Y%m%d%H%M%S')"
          echo "New tag version: $VERSION"
          # Tag the current commit and push the tag to the repository.
          git tag $VERSION
          git push origin $VERSION

      - name: Store artifact
        uses: actions/upload-artifact@v2  # Uploads the build artifacts (e.g., JAR files) to GitHub Actions.
        with:
          name: build-artifacts
          path: build/libs/

      - name: Notify success
        run: echo "Build and tag ${{ steps.tag_version.outputs.version }} successful."  # Outputs a success message.
